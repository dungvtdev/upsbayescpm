#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Nov 25, 2016 06:56:27 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

from . import activity_support

def vp_start_gui(**kargv):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    activity_support.set_Tk_var()
    top = Activity(root)
    activity_support.init(root, top, **kargv)
    root.mainloop()

w = None
def create_Activity(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    activity_support.set_Tk_var()
    top = Activity(w)
    activity_support.init(w, top, *args, **kwargs)

    return (w, top)

def destroy_Activity():
    global w
    w.destroy()
    w = None


class Activity:
    orig_activity_node = None
    activity_node = None
    callback_function = None

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self._bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        self._fgcolor = '#000000'  # X11 color: 'black'
        self._compcolor = '#d9d9d9' # X11 color: 'gray85'
        self._ana1color = '#d9d9d9' # X11 color: 'gray85'
        self._ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=self._bgcolor)
        self.style.configure('.',foreground=self._fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', self._compcolor), ('active',self._ana2color)])

        top.geometry("270x318+588+141")
        top.title("Activity")
        top.configure(highlightcolor="black")



        self.activity = LabelFrame(top)
        self.activity.place(relx=0.04, rely=0.03, relheight=0.33, relwidth=0.93)
        self.activity.configure(relief=GROOVE)
        self.activity.configure(text='''Activity''')
        self.activity.configure(width=250)

        self.Label1 = Label(self.activity)
        self.Label1.place(relx=0.04, rely=0.29, height=18, width=39)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Name''')

        self.et_activity_name = Entry(self.activity)
        self.et_activity_name.place(relx=0.28, rely=0.29, relheight=0.19
                , relwidth=0.58)
        self.et_activity_name.configure(background="white")
        self.et_activity_name.configure(font="TkFixedFont")
        self.et_activity_name.configure(selectbackground="#c4c4c4")
        self.et_activity_name.configure(textvariable=activity_support.txt_name)

        self.btn_goto_duration = Button(self.activity)
        self.btn_goto_duration.place(relx=0.04, rely=0.67, height=26, width=126)
        self.btn_goto_duration.configure(activebackground="#d9d9d9")
        self.btn_goto_duration.configure(command=activity_support.cmd_open_duration)
        self.btn_goto_duration.configure(text='''Duration Setting''')

        self.Labelframe2 = LabelFrame(top)
        self.Labelframe2.place(relx=0.04, rely=0.41, relheight=0.46
                , relwidth=0.93)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(text='''Result''')
        self.Labelframe2.configure(width=250)

        self.lb_result_noti = Label(self.Labelframe2)
        self.lb_result_noti.place(relx=0.08, rely=0.83, height=18, width=216)
        self.lb_result_noti.configure(activebackground="#f9f9f9")
        self.lb_result_noti.configure(foreground="#e00000")
        self.lb_result_noti.configure(justify=LEFT)
        self.lb_result_noti.configure(text='''Chay chuong trinh de xem ket qua''')
        self.lb_result_noti.configure(textvariable=activity_support.var_msg_log)

        self.cb_plot_node = ttk.Combobox(self.Labelframe2)
        self.cb_plot_node.place(relx=0.08, rely=0.34, relheight=0.12
                , relwidth=0.83)
        self.value_list = [1,2,3,]
        self.cb_plot_node.configure(values=self.value_list)
        self.cb_plot_node.configure(textvariable=activity_support.cmb_plot_type)
        self.cb_plot_node.configure(takefocus="")

        self.btn_plot = Button(self.Labelframe2)
        self.btn_plot.place(relx=0.64, rely=0.55, height=26, width=67)
        self.btn_plot.configure(activebackground="#d9d9d9")
        self.btn_plot.configure(command=activity_support.cmd_plot)
        self.btn_plot.configure(text='''Plot''')

        self.Label3 = Label(self.Labelframe2)
        self.Label3.place(relx=0.04, rely=0.15, height=18, width=36)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Plot''')

        self.btn_ok = Button(top)
        self.btn_ok.place(relx=0.37, rely=0.89, height=26, width=87)
        self.btn_ok.configure(activebackground="#d9d9d9")
        self.btn_ok.configure(command=activity_support.cmd_ok)
        self.btn_ok.configure(text='''OK''')

        self.btn_cancel = Button(top)
        self.btn_cancel.place(relx=0.72, rely=0.89, height=26, width=67)
        self.btn_cancel.configure(activebackground="#d9d9d9")
        self.btn_cancel.configure(command=activity_support.cmd_cancel)
        self.btn_cancel.configure(text='''Cancel''')

        self.btn_help = Button(top)
        self.btn_help.place(relx=0.04, rely=0.89, height=26, width=67)
        self.btn_help.configure(activebackground="#d9d9d9")
        self.btn_help.configure(command=activity_support.cmd_help)
        self.btn_help.configure(text='''Help''')

        self.menubar = Menu(top,bg=self._bgcolor,fg=self._fgcolor)
        top.configure(menu = self.menubar)


if __name__ == '__main__':
    vp_start_gui()


