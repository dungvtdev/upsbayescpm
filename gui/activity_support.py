#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Nov 25, 2016 06:58:19 PM


import sys
import matplotlib.pyplot as plt

from copy import deepcopy
from . import form_duration
from . import mainapp

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

""" Model
"""

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global var_msg_log
    var_msg_log = StringVar()

    global cmb_plot_type
    cmb_plot_type = StringVar()

    global txt_name
    txt_name = StringVar()


def cmd_cancel():
    print('activity_support.cmd_cancel')
    sys.stdout.flush()
    w.callback_function(w.orig_activity_node, None)

def cmd_help():
    print('activity_support.cmd_help')
    sys.stdout.flush()

def cmd_ok():
    print('activity_support.cmd_ok')
    sys.stdout.flush()
    w.activity_node.set_name(txt_name.get())
    w.callback_function(w.orig_activity_node, w.activity_node)


def cmd_open_duration():
    print('activity_support.cmd_open_duration')
    sys.stdout.flush()
    top, _ = form_duration.create_Duration_Model(top_level,
                                                 duration_model=w.activity_node.duration_model,
                                                 callback=on_duration_form_callback)
    mainapp.open_window('duration',top)

def cmd_plot():
    print('activity_support.cmd_plot')
    sys.stdout.flush()

    plot_index = w.cb_plot_node.current()
    node = w.plot_nodes_tuple[plot_index][1]
    node.get_histogram()
    node.draw_bar()
    plt.show()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, txt_name
    w = gui
    top_level = top
    root = top

    w.orig_activity_node = kwargs['activity_node']
    w.activity_node = w.orig_activity_node.copy() # deepcopy(w.orig_activity_node)
    w.callback_function = kwargs['callback']

    # init
    txt_name.set(w.activity_node.name)

    init_plot_list()

def init_plot_list():
    w.plot_nodes_tuple = w.activity_node.get_export_nodes()
    value_list = [t[0] for t in w.plot_nodes_tuple]
    # value_list = value_list[:4] + value_list[5:]
    w.cb_plot_node.configure(values=value_list)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def on_duration_form_callback(duration_model, new_duration_model):
    mainapp.destroy_window('duration')
    if new_duration_model:
        w.activity_node.replace_duration(new_duration_model)


if __name__ == '__main__':
    import activity
    activity.vp_start_gui()
