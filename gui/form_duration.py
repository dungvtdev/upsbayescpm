#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Nov 26, 2016 04:44:21 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

from . import duration_support
# import duration_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    duration_support.set_Tk_var()
    top = Duration_Model (root)
    duration_support.init(root, top)
    root.mainloop()

w = None
def create_Duration_Model(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    duration_support.set_Tk_var()
    top = Duration_Model (w)
    duration_support.init(w, top, *args, **kwargs)

    # duration_support.parents = (root, w)
    # duration_support.form = top

    return (w, top)

def destroy_Duration_Model():
    global w
    w.destroy()
    w = None


class Duration_Model:
    lst_risks_cur_select = ""
    lst_nodes_cur_select = -1
    duration_model = None
    ori_duration_model = None
    data_table = None
    callback = None

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self._bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        self._fgcolor = '#000000'  # X11 color: 'black'
        self._compcolor = '#d9d9d9' # X11 color: 'gray85'
        self._ana1color = '#d9d9d9' # X11 color: 'gray85' 
        self._ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=self._bgcolor)
        self.style.configure('.',foreground=self._fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', self._compcolor), ('active',self._ana2color)])

        top.geometry("928x453+0+270")
        top.title("Duration Model")

        # side navigators

        self.lst_nodes = Listbox(top)
        self.lst_nodes.place(relx=0.08, rely=0.15, relheight=0.5, relwidth=0.18)
        self.lst_nodes.configure(background="white")
        self.lst_nodes.configure(font="TkFixedFont")
        self.lst_nodes.configure(takefocus="cmd_lst_nodes_focus")
        self.lst_nodes.configure(width=144)
        self.lst_nodes.configure(selectmode=SINGLE)
        self.lst_nodes.configure(listvariable=duration_support.var_lst_nodes)
        self.lst_nodes.configure(exportselection=0)
        self.lst_nodes.bind('<Button1-ButtonRelease>', duration_support.on_lst_nodes_select)

        self.lst_risks = ttk.Combobox(top)
        self.lst_risks.place(relx=0.08, rely=0.07, relheight=0.04, relwidth=0.19)

        # self.value_list = [1,2,3,]
        # self.lst_risks.configure(values=self.value_list)
        self.lst_risks.configure(textvariable=duration_support.var_lst_risks)
        self.lst_risks.configure(width=147)
        self.lst_risks.configure(takefocus="cmd_lst_risks_focus")
        self.lst_risks.bind(" <<ComboboxSelected>>", duration_support.on_lst_risks_select)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.01, rely=0.07, height=18, width=34)
        self.Label1.configure(text='''Risks''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.01, rely=0.15, height=18, width=44)
        self.Label2.configure(text='''Nodes''')

        # bottom buttons

        self.btn_cancel = Button(top)
        self.btn_cancel.place(relx=0.92, rely=0.93, height=26, width=67)
        self.btn_cancel.configure(activebackground="#d9d9d9")
        self.btn_cancel.configure(command=duration_support.cmd_quit)
        self.btn_cancel.configure(text='''Cancel''')

        self.btn_ok = Button(top)
        self.btn_ok.place(relx=0.83, rely=0.93, height=26, width=67)
        self.btn_ok.configure(activebackground="#d9d9d9")
        self.btn_ok.configure(command=duration_support.cmd_ok)
        self.btn_ok.configure(text='''OK''')

        # self.btn_help = Button(top)
        # self.btn_help.place(relx=0.01, rely=0.93, height=26, width=67)
        # self.btn_help.configure(activebackground="#d9d9d9")
        # self.btn_help.configure(command=duration_support.cmd_help)
        # self.btn_help.configure(text='''Help''')

        self.msg_notif = Message(top)
        self.msg_notif.place(relx=0.1, rely=0.84, relheight=0.04, relwidth=0.49)
        self.msg_notif.configure(foreground="#eb0018")
        # self.msg_notif.configure(textvariable=duration_support.var_notif)
        self.msg_notif.configure(width=453)

        # frame content
        self.lb_type = Label(top)
        self.lb_type.place(relx=0.28, rely=0.07, height=18, width=536)
        self.lb_type.configure(anchor=NW)
        self.lb_type.configure(justify=LEFT)
        self.lb_type.configure(text='''Type: adlfad''')
        self.lb_type.configure(width=536)

        # CPD
        self.frm_cpd_content = Frame(top)
        self.frm_cpd_content.place(relx=0.28, rely=0.13, relheight=0.78
                                   , relwidth=0.72)
        self.frm_cpd_content.configure(relief=GROOVE)
        self.frm_cpd_content.configure(borderwidth="2")
        self.frm_cpd_content.configure(relief=GROOVE)
        self.frm_cpd_content.configure(width=685)

        self.Label4 = Label(self.frm_cpd_content)
        self.Label4.place(relx=0.03, rely=0.03, height=18, width=76)
        self.Label4.configure(text='''Labels''')
        self.Label4.configure(width=76)

        self.Label5 = Label(self.frm_cpd_content)
        self.Label5.place(relx=0.39, rely=0.03, height=18, width=156)
        self.Label5.configure(text='''NPT''')
        self.Label5.configure(width=156)

        self.txt_cpd_labels = Text(self.frm_cpd_content)
        self.txt_cpd_labels.place(relx=0.01, rely=0.08, relheight=0.79
                                  , relwidth=0.2)
        self.txt_cpd_labels.configure(background="white")
        self.txt_cpd_labels.configure(font="TkTextFont")
        self.txt_cpd_labels.configure(selectbackground="#c4c4c4")
        self.txt_cpd_labels.configure(width=136)
        self.txt_cpd_labels.configure(wrap=WORD)

        self.btn_cpd_apply_labels = Button(self.frm_cpd_content)
        self.btn_cpd_apply_labels.place(relx=0.07, rely=0.9, height=26, width=97)

        self.btn_cpd_apply_labels.configure(activebackground="#d9d9d9")
        self.btn_cpd_apply_labels.configure(command=duration_support.cmd_cpd_apply_label)
        self.btn_cpd_apply_labels.configure(text='''Apply Label''')
        self.btn_cpd_apply_labels.configure(width=97)

        self.frm_cpd_npt = Frame(self.frm_cpd_content)
        self.frm_cpd_npt.place(relx=0.23, rely=0.08, relheight=0.79
                               , relwidth=0.75)
        self.frm_cpd_npt.configure(relief=SUNKEN)
        self.frm_cpd_npt.configure(borderwidth="2")
        self.frm_cpd_npt.configure(relief=SUNKEN)
        self.frm_cpd_npt.configure(width=515)

        self.btn_cpd_apply_npt = Button(self.frm_cpd_content)
        self.btn_cpd_apply_npt.place(relx=0.86, rely=0.9, height=26, width=87)
        self.btn_cpd_apply_npt.configure(activebackground="#d9d9d9")
        self.btn_cpd_apply_npt.configure(command=duration_support.cmd_cpd_apply_npt)
        self.btn_cpd_apply_npt.configure(text='''Apply NPT''')
        self.btn_cpd_apply_npt.configure(width=87)


        # Distribution
        self.frm_distribution = Frame(top)
        self.frm_distribution.place(relx=0.28, rely=0.13, relheight=0.78
                                    , relwidth=0.72)
        self.frm_distribution.configure(relief=GROOVE)
        self.frm_distribution.configure(borderwidth="2")
        self.frm_distribution.configure(relief=GROOVE)
        self.frm_distribution.configure(width=685)

        self.frm_distribution_table = Frame(self.frm_distribution)
        self.frm_distribution_table.place(relx=0.01, rely=0.03, relheight=0.86
                , relwidth=0.97)
        self.frm_distribution_table.configure(relief=SUNKEN)
        self.frm_distribution_table.configure(borderwidth="2")
        self.frm_distribution_table.configure(relief=SUNKEN)
        self.frm_distribution_table.configure(width=665)

        self.btn_distribution_apply = Button(self.frm_distribution)
        self.btn_distribution_apply.place(relx=0.83, rely=0.9, height=26
                , width=107)
        self.btn_distribution_apply.configure(activebackground="#d9d9d9")
        self.btn_distribution_apply.configure(text='''Button''')
        self.btn_distribution_apply.configure(width=107)
        self.btn_distribution_apply.configure(command=duration_support.cmd_dist_apply)

        self.frm_distribution.pi = self.frm_distribution.place_info()
        self.frm_cpd_content.pi = self.frm_cpd_content.place_info()

if __name__ == '__main__':
    vp_start_gui()
