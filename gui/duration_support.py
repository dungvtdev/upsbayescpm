#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Nov 26, 2016 06:15:06 PM


import sys
from copy import deepcopy
from .utils.table_input import TableInput

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global var_lst_nodes
    var_lst_nodes = StringVar()

    global var_lst_risks
    var_lst_risks = StringVar()

    global var_notif
    var_notif = StringVar()


def cmd_choices_apply():
    print('duration3_support.cmd_choices_apply')
    sys.stdout.flush()
    txt_str = w.txt_labels.get(1.0, END)
    labels = [x for x in txt_str.split() if x]

    node = get_current_node()
    node.labels = labels

    redraw_data()


def cmd_data_apply():
    print('duration3_support.cmd_data_apply')
    sys.stdout.flush()
    data = w.data_table.export_data()
    print('Apply data %s' %str(data))
    node = get_current_node()
    node.data = data

def cmd_help():
    print('duration3_support.cmd_help')
    sys.stdout.flush()

def cmd_ok():
    print('duration3_support.cmd_ok')
    sys.stdout.flush()
    w.callback(w.orig_duration_model, w.duration_model)

def cmd_apply():
    pass

def cmd_quit():
    print('duration3_support.cmd_quit')
    sys.stdout.flush()
    w.callback(w.orig_duration_model, None)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    w.orig_duration_model = kwargs['duration_model']
    w.duration_model = deepcopy(w.orig_duration_model)
    w.callback = kwargs['callback']

    init_list()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


def init_list():
    global w

    app = w

    # list risk
    lst_risks = app.lst_risks
    lst_risks.configure(values=w.duration_model.element_names_label)
    lst_risks.set(w.duration_model.element_names_label[0])
    w.lst_nodes_cur_select = 0

    on_lst_risks_select(None)

def on_lst_risks_select(event):

    # print(w.lst_risks.get())
    str_select = w.lst_risks.get()
    if str_select == w.lst_risks_cur_select:
        return

    # fill lst_nodes
    w.lst_nodes.delete(0, END)
    element = w.duration_model.get_element(w.duration_model.get_element_label_index(str_select))
    node_names = element.nodes_name_label
    for s in node_names:
        w.lst_nodes.insert(END, s)
    w.lst_nodes.select_set(0,0)
    w.lst_risks_cur_select = str_select
    redraw_data()

def on_lst_nodes_select(event):
    if w.lst_nodes.curselection():
        index = w.lst_nodes.curselection()[0]
        print('Lst nodes select %s' % index)
        if index == w.lst_nodes_cur_select:
            return
        w.lst_nodes_cur_select = index
        redraw_data()

def redraw_data():
    print('redaw data')
    node = get_current_node()

    # render labels
    w.txt_labels.delete(1.0, END)
    str_labels = '\n'.join(node.labels)
    w.txt_labels.insert(END, str_labels)

    # render data
    for widget in w.frm_data.winfo_children():
        widget.destroy()

    rows = node.labels
    columns = node.get_table_labels()
    data = node.data
    w.data_table = TableInput(w.frm_data,rows, columns, data)

def get_current_node():
    element = w.duration_model.get_element(w.duration_model.get_element_label_index(w.lst_risks_cur_select))
    node = element.get_node_by_id(w.lst_nodes_cur_select)
    return node

if __name__ == '__main__':
    import from_duration

    from_duration.vp_start_gui()
